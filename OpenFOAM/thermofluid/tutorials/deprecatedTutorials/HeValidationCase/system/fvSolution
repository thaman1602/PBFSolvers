/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solvers
{
    rho
    {}

    pcorr
    {
        solver          PCG;
        preconditioner  DIC;
        tolerance       1e-10;
        relTol          0;
        /*solver          PCG;
        preconditioner
        {
            preconditioner  GAMG;
            tolerance       1e-9;
            relTol          0;
            smoother        GaussSeidel;
        }
        tolerance       1e-9;
        relTol          0;
        maxIter         100;*/
    }

    pd
    {
        solver          PCG;
        preconditioner  DIC;
        tolerance       1e-8;
        relTol          0;
	minIter		1;        
	/*solver          GAMG;
        tolerance       1e-9;
        relTol          0.0;//0.05;
        smoother        GaussSeidel;//GaussSeidel;//
        nPreSweeps      2;
        nPostSweeps     3;
        nFinestSweeps   2;
        cacheAgglomeration on;
        nCellsInCoarsestLevel 10;
        agglomerator    faceAreaPair;
        mergeLevels     1;*/
    }

    pdFinal
    {
        solver          PCG;
        preconditioner  DIC;
        tolerance       1e-08;
        relTol          0;
	minIter		1;
        /*solver          PCG;
        preconditioner
        {
            preconditioner  GAMG;
            tolerance       1e-9;
            relTol          0;
            nVcycles        5;
            smoother        GaussSeidel;//GaussSeidel;//DICGaussSeidel;//
            nPreSweeps      2;
            nPostSweeps     3;
            nFinestSweeps   2;
            cacheAgglomeration on;
            nCellsInCoarsestLevel 10;
            agglomerator    faceAreaPair;
            mergeLevels     1;
        }
        tolerance       1e-9;
        relTol          0;
        maxIter         25;//20;*/
    }
    
    U
    {
        solver          BiCGStab;
        preconditioner  DILU;
        tolerance       1e-8;
        relTol          0;
    }

    T
    {
        solver          PBiCG;
        preconditioner  DILU;
        minIter         1;
        tolerance       1e-12;
        relTol           0.1;

    }

    /*T
    {
	solver		BiCGStab;
	preconditioner	DILU;
	minIter		2;
	tolerance	1e-8;
	reTol		0.0;
    }*/
}

PISO
{
    cAlpha          1.0;
}

PIMPLE
{
    momentumPredictor no;
    nOuterCorrectors    1;
    nCorrectors    	5;
    nNonOrthogonalCorrectors 0;
    nAlphaCorr      2;
    nAlphaSubCycles 3;

    nTCorrectors    250;
    //pdRefCell        0;
    //pdRefValue       0;
    //pRefValue       0;

    residualControl
        {
            "U"
            {
                tolerance    1e-8;
                relTol        0;
            }
            "pd"
            {
                tolerance    1e-8;
                relTol        0;
            }

	    "temperatureTol"
	    {
		tolerance    1e-8;
		relTol       0;
	    }

	    "alternativeTol"
	    {
		tolerance	1e-8;
		relTol		0;
	    }

            "absTol"
            {
                tolerance       1e-8;
                relTol          0;
            }
	    "gTTol"
            {   
                tolerance       1e-7;
                relTol          0;
            }
        }
}

Controls
{
    relaxCorr    1.0;
}

isoAdvector
{
    // Note: use full Crank-Nicolson when topo changes are not occuring,
    // otherwise the code resorts to Euler implicit
    CrankNicolsonCoeff 0.5;

    // Euler implicit
    //CrankNicolsonCoeff 1;

    gradAlphaNormal true;

    alphaFluxTolerance 1e-6; // 10*SMALL by default

    // Determines which cells are classified as surface cells
    vof2IsoTol         1e-6; // 1e-8 by default

    clipAlphaTol 1e-6;
    nAlphaBounds 1;
    snapAlpha   false; // true
}

relaxationFactors
  {
	fields
	{
		pd	1.0;
	}
	equations
	{
		U	0.99;
		T	0.8;
	} 
  }
// ************************************************************************* //
